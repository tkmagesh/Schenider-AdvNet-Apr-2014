//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFDemoClient.ServiceProxies {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProxies.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        int Add(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Sutract", ReplyAction="http://tempuri.org/ICalculator/SutractResponse")]
        int Sutract(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Sutract", ReplyAction="http://tempuri.org/ICalculator/SutractResponse")]
        System.Threading.Tasks.Task<int> SutractAsync(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        int Multiply(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        int Divide(int Number1, int Number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int Number1, int Number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : WCFDemoClient.ServiceProxies.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<WCFDemoClient.ServiceProxies.ICalculator>, WCFDemoClient.ServiceProxies.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int Number1, int Number2) {
            return base.Channel.Add(Number1, Number2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int Number1, int Number2) {
            return base.Channel.AddAsync(Number1, Number2);
        }
        
        public int Sutract(int Number1, int Number2) {
            return base.Channel.Sutract(Number1, Number2);
        }
        
        public System.Threading.Tasks.Task<int> SutractAsync(int Number1, int Number2) {
            return base.Channel.SutractAsync(Number1, Number2);
        }
        
        public int Multiply(int Number1, int Number2) {
            return base.Channel.Multiply(Number1, Number2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int Number1, int Number2) {
            return base.Channel.MultiplyAsync(Number1, Number2);
        }
        
        public int Divide(int Number1, int Number2) {
            return base.Channel.Divide(Number1, Number2);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int Number1, int Number2) {
            return base.Channel.DivideAsync(Number1, Number2);
        }
    }
}
